package com.mysql.demo;

import lombok.Data;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.io.Serializable;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Optional;

@Controller
@RequestMapping(path="/users")
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add", consumes = {MediaType.APPLICATION_JSON_VALUE})
    public ResponseEntity<?> addNewUser(@RequestBody Request request) {
        UserTest user = request.getUser();

        if(user.getUsername().isEmpty() || user.getEmail().isEmpty()){
            GenericResponseError response = new GenericResponseError();
            response.setTimestamp(new Timestamp(System.currentTimeMillis()));
            response.setStatus(400);
            response.setError("Bad Request: Verify username or email is empty");
            response.setPath("/users/add");
            return new ResponseEntity<GenericResponseError>(response, HttpStatus.BAD_REQUEST);
        }

        User n = new User();
        n.setUsername(user.getUsername());
        n.setEmail(user.getEmail());
        try {
            User isSaved = userRepository.save(n);
            return new ResponseEntity<Request>(request, HttpStatus.CREATED);
        } catch (IllegalArgumentException ex){
            return new ResponseEntity<Request>(request, HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
    @CrossOrigin(origins = "http://localhost:4200")
    @GetMapping(path = "/resource",produces= MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> getGretting() {
        // This returns a JSON or XML with the users
        Response response = new Response();
        response.setMessage("Hola mundo");
        return new ResponseEntity<Response>(response, HttpStatus.ACCEPTED);
    }
    @Data
    class Response implements Serializable {
        public String message;
    }
    @Data
    class GenericResponseError {
        private Timestamp timestamp;
        private int status;
        private String error;
        private String Path;
    }
}